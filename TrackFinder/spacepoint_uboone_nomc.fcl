#include "services_microboone.fcl"
#include "trackfinderservices.fcl"
#include "trackfindermodules.fcl"

process_name: SpacePointAna

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "spacepoint_uboone_nomc.root" }
  scheduler:    { wantTracer: true wantSummary: true }
  Timing:       {}
  message:   @local::standard_debug
  RandomNumberGenerator: {} #ART native random number generator
  user: { }
}


# services from LArSoft - see definitions for configurations in 
# geometry_microboone.fcl
# services_microboone.fcl
services.user.ExptGeoHelperInterface: @local::microboone_geometry_helper
services.user.Geometry:           @local::microboone_geo 
services.user.DetectorPropertiesService: @local::microboone_detproperties
services.user.LArPropertiesService:      @local::microboone_properties
services.user.LArFFT:             @local::microboone_larfft  
services.user.DatabaseUtil:       @local::microboone_database
services.user.BackTracker:        @local::microboone_backtracker

services.message.destinations.debugmsg.type: "cout"
services.message.destinations.debugmsg.categories.default.limit: 1000000
services.message.destinations.debugmsg.categories.default.reportEvery: 1

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  10        # Number of events to create
}

outputs:
{}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:{}

# filters:{}

 analyzers:{}

 ana:  [ spacepoint ]

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [ ana ]  
}

physics.analyzers.spacepoint: @local::microboone_spacepoint
physics.analyzers.spacepoint.UseMC: false
